package com.aws.proj1.repo.impl;

import com.amazonaws.services.s3.model.AmazonS3Exception;
import com.amazonaws.services.s3.model.Bucket;
import com.amazonaws.services.s3.model.ListObjectsRequest;
import com.amazonaws.services.s3.model.ObjectListing;
import com.amazonaws.services.s3.model.PutObjectRequest;
import com.amazonaws.services.s3.model.S3ObjectSummary;
import com.aws.ccproject.config.AwsConfiguration;
import com.aws.ccproject.constants.AwsSecretKeys;
import com.aws.proj1.repo.S3Repo;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

import java.io.File;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;

@Slf4j
@Repository
public class S3RepoImpl implements S3Repo {

  private static final String GETTING_URL = "getting s3 url using key: {}";
  private static final String UPLOADING_FILE = "Uploading file with name: {}";
  private static final String CREATING_BUCKET= "Creating the bucket if not exists. {}";
  private static final String BUCKET_ALREADY_EXISTS = "Bucket {} already exists.";
  private static final String RETURNING_BUCKET = "Returning the bucket.";


  @Autowired
  private AwsConfiguration awsConfiguration;

  @Override
  public URL getUrl(String bucketName, String key) {
//    log.info(GETTING_URL,key);
    //getting s3 url using key: test_0.JPEG
    return awsConfiguration.amazonS3().getUrl(bucketName, key);
  }

  @Override
  public void uploadFileToS3Bucket(final String bucketName, final File file) {
    createBucket(bucketName);
    final String fileName = file.getName();
//    log.info(UPLOADING_FILE,fileName);
    final PutObjectRequest putObjectRequest = new PutObjectRequest(bucketName, fileName, file);
    awsConfiguration.amazonS3().putObject(putObjectRequest);
  }

  @Override
  public Bucket createBucket(String bucketName) {
//    log.info(CREATING_BUCKET);
    Bucket bucket = null;
    if (awsConfiguration.amazonS3().doesBucketExistV2(bucketName)) {
      System.out.format(BUCKET_ALREADY_EXISTS, bucketName);
      bucket = getBucket(bucketName);
    } else {
      try {
        bucket = awsConfiguration.amazonS3().createBucket(bucketName);
      } catch (AmazonS3Exception e) {
        System.err.println(e.getErrorMessage());
      }
    }
    return bucket;
  }

  public Bucket getBucket(String bucketName) {
//    log.info(RETURNING_BUCKET);
    Bucket namedBucket = null;
    List<Bucket> buckets = awsConfiguration.amazonS3().listBuckets();
    for (Bucket b : buckets) {
      if (bucketName.equals(b.getName())) {
        namedBucket = b;
      }
    }
    return namedBucket;
  }


  @Override
  public List<String> getResponseResults() {
    ListObjectsRequest listObjectsRequest =
        new ListObjectsRequest().withBucketName(AwsSecretKeys.OUTPUT_S3);

    List<String> keys = new ArrayList<>();

    ObjectListing objects = awsConfiguration.amazonS3().listObjects(listObjectsRequest);

    for (S3ObjectSummary item : objects.getObjectSummaries()) {
      keys.add(item.getKey());
    }

    return keys;
  }

}
